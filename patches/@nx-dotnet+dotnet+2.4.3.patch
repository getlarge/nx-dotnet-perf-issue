diff --git a/node_modules/@nx-dotnet/dotnet/src/lib/core/dotnet.client.d.ts b/node_modules/@nx-dotnet/dotnet/src/lib/core/dotnet.client.d.ts
index 72a4e37..c00301b 100644
--- a/node_modules/@nx-dotnet/dotnet/src/lib/core/dotnet.client.d.ts
+++ b/node_modules/@nx-dotnet/dotnet/src/lib/core/dotnet.client.d.ts
@@ -23,9 +23,11 @@ export declare class DotNetClient {
     runTool<T extends Record<string, string | boolean>>(tool: string, positionalParameters?: string[], parameters?: T, extraParameters?: string): void;
     addProjectToSolution(solutionFile: string, project: string): void;
     getProjectReferences(projectFile: string): string[];
+    getProjectReferencesAsync(projectFile: string): Promise<string[]>;
     getSdkVersion(): string;
     printSdkVersion(): void;
     logAndExecute(params: string[]): void;
     private spawnAndGetOutput;
+    private spawnAsyncAndGetOutput;
     private logAndSpawn;
 }
diff --git a/node_modules/@nx-dotnet/dotnet/src/lib/core/dotnet.client.js b/node_modules/@nx-dotnet/dotnet/src/lib/core/dotnet.client.js
index b2afe77..f9e1008 100644
--- a/node_modules/@nx-dotnet/dotnet/src/lib/core/dotnet.client.js
+++ b/node_modules/@nx-dotnet/dotnet/src/lib/core/dotnet.client.js
@@ -6,6 +6,7 @@ const semver = require("semver");
 const utils_1 = require("@nx-dotnet/utils");
 const models_1 = require("../models");
 const parse_dotnet_new_list_output_1 = require("../utils/parse-dotnet-new-list-output");
+const { once } = require("stream");
 class DotNetClient {
     constructor(cliCommand, cwd) {
         this.cliCommand = cliCommand;
@@ -209,6 +210,14 @@ class DotNetClient {
             .map((line) => line.trim())
             .filter(Boolean);
     }
+    async getProjectReferencesAsync(projectFile) {
+        const output = await this.spawnAsyncAndGetOutput(['list', projectFile, 'reference']);
+        return output
+            .split('\n')
+            .slice(2)
+            .map((line) => line.trim())
+            .filter(Boolean);
+    }
     getSdkVersion() {
         return this.cliCommand.info.version.toString();
     }
@@ -238,6 +247,25 @@ class DotNetClient {
         }
         return res.stdout.toString();
     }
+    async spawnAsyncAndGetOutput(params) {
+        params = params.map((param) => param.replace(/\$(\w+)/, (_, varName) => process.env[varName] ?? ''));
+        const res = (0, child_process_1.spawn)(this.cliCommand.command, params, {
+            cwd: this.cwd ?? process.cwd(),
+        });
+        let stdout = '';
+        let stderr = ''
+        res.stdout.setEncoding('utf8').on('data', (data) => {
+            stdout += data.trim();
+        })
+        res.stderr.setEncoding('utf8').on('data', (data) => {
+            stderr += data.trim();
+        })
+        const [code] = await once(res, 'exit');
+        if (code !== 0) {
+            throw new Error(`dotnet execution returned status code ${res.status} \n ${stderr}`);
+        }
+        return stdout;
+    }
     logAndSpawn(params) {
         console.log(`Executing Command: ${this.cliCommand.command} "${params.join('" "')}"`);
         return (0, child_process_1.spawn)(this.cliCommand.command, params, {
